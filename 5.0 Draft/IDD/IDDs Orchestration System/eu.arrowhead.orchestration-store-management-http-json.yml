openapi: 3.0.0
info:
  title: Orchestration Management API
  version: 1.0.0
paths:
  /orchestration/rules:
    get:
      summary: Get All Orchestration Rules
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rule'
    post:
      summary: Create Orchestration Rule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rule'
      responses:
        '201':
          description: Orchestration Rule created successfully
        '400':
          description: Invalid request

  /orchestration/rules/{ruleId}:
    get:
      summary: Get Orchestration Rule by ID
      parameters:
        - name: ruleId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
        '404':
          description: Orchestration Rule not found

    put:
      summary: Update Orchestration Rule
      parameters:
        - name: ruleId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rule'
      responses:
        '200':
          description: Orchestration Rule updated successfully
        '404':
          description: Orchestration Rule not found
        '400':
          description: Invalid request

    delete:
      summary: Delete Orchestration Rule
      parameters:
        - name: ruleId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Orchestration Rule deleted successfully
        '404':
          description: Orchestration Rule not found

  /orchestration/configurations:
    post:
      summary: Upload System of Systems Configuration
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '201':
          description: Configuration uploaded successfully
        '400':
          description: Invalid request

    get:
      summary: Get Orchestration Configurations
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Configuration'

  /orchestration/configurations/{id}:
    delete:
      summary: Delete Configuration
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Configuration deleted successfully
        '404':
          description: Configuration not found

  /orchestration/configurations/active-configuration:
    get:
      summary: Get Active Configuration
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActiveConfiguration'

    put:
      summary: Set Active Configuration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActiveConfiguration'
      responses:
        '200':
          description: Active Configuration set successfully
        '400':
          description: Invalid request

components:
  schemas:
    Address:
      description: |
        Identifies a _transport_ and a _location_.

        The _transport_ identifies the base protocol that facilitates addressing a specific service
        instance. Examples of transports that can be supported are `tcp4`, `tcp6`, `udp4`, `udp6`
        and `unix`. A protocol only counts as a transport if it both (A) provides a way of
        addressing and, by extension, sending messages to service providers and consumers, as well
        as (B) does not build upon another protocol also providing this capability. I other words,
        TLS and DTLS are _not_ transports, because they build upon the TCP and UDP protocols, which
        satisfy condition A.

        What the _location_ part consists of depends on what transport is identified. If the
        transport is `tcp4` or `udp4`, the location is an IPv4 address expressed as four decimal
        numbers separated by dots, a colon and a port number, such as in `192.168.3.22:64075`. If
        the transport is `tcp6` or `udp6`, the location is an IPv6 address, rendered as described in
        [RFC 5952](https://www.rfc-editor.org/rfc/rfc5952), within square brackets, followed by a
        colon and a port number. If the transport is `unix`, the location is an absolute filesystem
        path to a Unix socket file.
      type: string
      pattern: ^(?<transport>[^:]+):\w*(?<location>.*)$
      example: tcp4:192.168.0.7:45326

    ActiveConfiguration:
      type: object
      properties:
        configuration: 
          $ref: '#/components/schemas/Configuration'
        validity:
          $ref: '#/components/schemas/TimeToLive'
        
    Configuration:
      type: object
      properties:
        configId:
          type: string
          description: unique identifier of the SoS configuration        
        name:
          type: string
          description: configuration human readable name
        rules:
          type: array
          description: set of rules that compose the configuration
          items: 
            $ref: '#/components/schemas/Rule'
        target: 
          type: object
          description: Target of the orchestration configuration
          #TODO: define how the target should look like, is it just one target? is it an array of targets? Are the targets within the rules?
            
    Metadata:    
      description: |
        Additional details of relevance when consuming a service. What metadata is made available
        depends on the type of the service holding the metadata. Possible examples of metadata are
        HTTP base paths, message size restrictions and caching directives.
      type: object
      example: {"basePath":"v2"}

    Rule:
      type: object
      properties:
        ruleId:
          type: string
        provider: 
          $ref: '#/components/schemas/System'
        consumer: 
          $ref: '#/components/schemas/System'
        service: 
          $ref: '#/components/schemas/Service'
        Metadata:
          $ref: '#/components/schemas/Metadata'

    Service: 
      type: object
      description: Information about the orchestrated service
      properties:
        serviceID:
          type: string
          description: identifier of service
        serviceInstance:
          type: string
          description: name of the service instance

    System:
      type: object
      description: information describing a system within a local cloud. 
      properties:
        system-name:
          type: string
          description: human readable name of the system
        address:
          $ref: '#/components/schemas/Address'

    TimeToLive:
      description: TTL, duration specigying the maximun amount of time a service regristration remains valid before requiring renewal or 
        expiration. 
      type: string
      pattern: ^(?:(\d+)d)?(?:(\d+)h)?(?:(\d+)m)?(?:(\d+)s)?$
      example: 2d12h

