openapi: 3.0.3
info:
  title: Authorization Policy Management API
  description: |
    This specification shows how to use the Authorization policy management API. This service allows for data owners,
    system administrators, or service providers to manage authorization policies to be enforced by the Authorization
    system. 

    The process to create an authorization policy is to first create the needed subjects and resource objects within the 
    policy server. Then, one needs to create  a set of subject and resource attributes. These attributes describes the subject
    and the resource respectively. The next step is to associate the subject with its attributes and the resource with its 
    attributes (using the /associations endpoint). Finally, access rights are granted by creating permissions (using the 
    /permissions endpoint). This permissions connect subject attributes with resource attributes, embedding a set of access 
    rights that the subjects associated with those attributes have over the resources related to the resource attributes. 

    The full process is needed when setting up the authorization system. However, once associations are set, an attribute 
    set is defined, and a set of permissions is stablished, only the creation of new subjects or resources and an association
    to an existing attribute is needed to derive already created and defined permissions. 

  version: 1.0.0
paths:
  /associations:
    post:
      summary: Create a New association
      description: Create a new association relating resources to resource-attributes, subjects (consumers) to 
        subject attributes, or attribute-attribute associations. 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Association' 
            examples: 
              example1:
                summary: A call to associate a Temperature sensor service to the existing "OutsideTemp" resource attribute. 
                value: 
                  id: "123123"
                  association-type: "resource"
                  target:
                    id: "existing-resource123"
                    name: "TempSensor123"
                  attribute:
                    id: "existing-attribute1233"
                    name: "OutsideTemp"
                    attribute-type: "resource"
      responses:
        '201':
          description: Association created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Association'

    get:
      summary: List Associations
      description: Retrieve a list of all Associations.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Association'
  /associations/{associationId}:
    get:
      summary: Get association by ID
      description: Retrieve details of a specific association by its identifier.
      parameters:
        - name: associationId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Association'
    put:
      summary: Update Association
      description: Update an existing association by its identifier.
      parameters:
        - name: associationId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Association'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Association'
    delete:
      summary: Delete Association
      description: Delete an association by its identifier.
      parameters:
        - name: associationId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No content
  
  /permissions: 
    post:
      summary: Grant a new set of permissions.
      description: Create a new set of permissions between a resource-attributes and a subject-attribute specified in the 
        request body. 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Permission' 
            examples:
              example1:
                summary: A call to derive "consume" privileges for the subject attribute "TempController" to the 
                  resource attribute "OutsideTemp". 
                value:
                  id: "321654"
                  subject-attribute:
                    id: "someid123" 
                    name: "TempController"
                    attribute-type: "subject"
                  access-rights:
                    - "consume"
                  resource-attribute:
                    id: "existing-attribute1233"
                    name: "OutsideTemp"
                    attribute-type: "resource"
      responses:
        '201':
          description: Permission created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permission'

    get:
      summary: List Permission
      description: Retrieve a list of all Permissions.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Permission'
  /permissions/{permissionId}:
    get:
      summary: Get permission by ID
      description: Retrieve details of a specific permission by its identifier.
      parameters:
        - name: permissionId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permission'
    put:
      summary: Update Permission
      description: Update an existing permission by its identifier.
      parameters:
        - name: permissionId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Permission'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permission'
    delete:
      summary: Delete Permission
      description: Delete a permission by its identifier.
      parameters:
        - name: permissionId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No content

  /subjects:
    get:
      summary: List subjects
      description: Retrieve a list of all subjects.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Subject'
  /subjects/{subjectId}:
    get:
      summary: Get Subject by ID
      description: Retrieve details of a specific subject by its identifier.
      parameters: 
        - name: subjectId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subject'
    delete:
      summary: Delete subject
      description: Delete a subject by its identifier. 
      parameters:
        - name: subjectId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No content
  /resources:
    get:
      summary: List resources
      description: Retrieve a list of all resources.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Resource'
  /resources/{resourceId}:
    get:
      summary: Get resources by ID
      description: Retrieve details of a specific resource by its identifier.
      parameters: 
        - name: resourceId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
          application/json:
            schema:
              $ref: '#/components/schemas/Resource'
    delete:
      summary: Delete resource.
      description: Delete a resource by its identifier. 
      parameters:
        - name: resourceId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No content
 
  /user-attributes:
    get:
      summary: List user attributes
      description: Retrieve a list of all user attributes.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Attribute'
  /user-attributes/{uaId}:
    get:
      summary: Get user attribute by ID
      description: Retrieve details of a specific user attribute by its identifier.
      parameters: 
        - name: uaId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attribute'
    delete:
      summary: Delete user attribute.
      description: Delete an user attribute by its identifier. 
      parameters:
        - name: uaId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No content
  /object-attributes:
    get:
      summary: List object attributes
      description: Retrieve a list of all object attributes.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Attribute'
  /object-attributes/{oaId}:
    get:
      summary: Get user object by ID
      description: Retrieve details of a specific object attribute by its identifier.
      parameters: 
        - name: oaId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attribute'
    delete:
      summary: Delete object attribute.
      description: Delete an object attribute by its identifier. 
      parameters:
        - name: oaId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No content


components:
  schemas:
    Policy:
      type: object
      required: 
        - name
        - effect
      properties:
        id:
          type: string
          description: The unique identifier of the policy.
        name:
          type: string
          description: The human-readable name of the policy.
        description:
          type: string
          description: A detailed description of the policy.
        access-rights:
          type: array
          items:
            type: string
          description: List of access rights that the policy controls.
        subjects:
          type: array
          items:
            type: string
          description: List of entities subject to the policy.
        resources:
          type: array
          items:
            type: string
          description: List of resources to which the policy applies.
        effect:
          type: string
          enum: ['allow', 'deny', 'associate']
          description: The desired effect of the policy in the policy engine, this may allow the usage of ABAC, RBAC or rule-based
            policy engine. For example, a policy containg only subjects, resources, and access-rights with the effect 'allow' would 
            create a rule-based policy (subject, ar, resource). A policy containing only subjects/resources and user-attributes/object-attributes 
            and with the effect 'associate' would create an attribute-based or role-based association between the specified user or object and 
            the respective attributes. The 'deny' effect can be used to create explicit access prohibitions. 
        user-attributes: 
          type: array
          items:
            type: string
          description: List of user-attributes (ua) that the policy controls.
        object-attributes:
          type: array
          items:
            type: string
          description: List of object-attributes (oa) that the policy controls. 

    Association:
      type: object
      required:
        - id
        - association-type
        - target
        - attribute
      properties:
        id:
          type: string
          description: The unique identifier of the association
        association-type:
          type: string
          description: determines if the association will be subject -> subject-attribute or resource -> resource-attribute.
            If this property is set to "subject", a valid subject object needs to be added as parameter for the target property. 
            Likewise if the property is set to "resource". Moreover, the specified attribute in the _attribute_ property needs
            to match this property's value. 
            One can create attribute associations to generate hierarchical attribute structures. For that, the association-type
            property must be "attribute" and an _attribute_ object must be added as parameter. 
          enum: ["subject", "resource", "attribute"]
        target:
          oneOf:
            - $ref: '#/components/schemas/Subject'
            - $ref: '#/components/schemas/Resource'
            - $ref: '#/components/schemas/Attribute'
        attribute:
          $ref: '#/components/schemas/Attribute'

    Permission:
      type: object
      required:
        - id
        - subject-attribute
        - access-rights
        - resource-attribute
      properties:
        id:
          type: string
          description: The unique identifier of the permission
        subject-attribute:
          $ref: '#/components/schemas/Attribute'
        access-rights:
          type: array
          description: List of access rights that the policy controls.
          items:
            type: string
        resource-attribute:
          $ref: '#/components/schemas/Attribute'
        metadata:
          type: string
          description: additional information related to the permission, e.g., conditions, obligations, etc. 

    Attribute: 
      type: object
      required:
        - id
        - name
        - Attribute-type
      properties:
        id:
          type: string
          description: The unique identifier of the attribute
        name:
          type: string
          description: The human-readable name of the attribute
        attribute-type:
          type: string
          enum: ['subject', 'resource']
          description: Type of the Attribute, 'user' for subject attributes (or roles), 'object' for resource attributes. 
    
    Subject:
      type: object
      required:
        - id
        - name
      properties: 
        id: 
          type: string
          description: The unique identifier of the subject
        name: 
          type: string
          description: The human-readable name of the subject
        auth-info:
          type: string
          description: Authentication information in case needed. E.g., certificate information of consuming systems.
    
    Resource:
      required: 
      type: object
        - id
        - name
      properties:
        id:
          type: string
          description: the unique identifier of the resource
        name: 
          type: string
          description: the human-readable name of the resource
        auth-info:
          type: string
          description: Authentication information in case needed. E.g., certificate information of providing systems.